@startuml
class Program <<static>> {
    {static} - Main() : void
}
class Form1Events {
    + Form1Events(status:ToolStripStatusLabel, trackBar:TrackBar, form:Form)
    + FormOpen_Click(sender:object, e:EventArgs) : void
    + Form1Play_Click(sender:object, e:EventArgs) : void
    + Form1Pause_Click(sender:object, e:EventArgs) : void
    + Form1Volume_Change(sender:object, e:EventArgs) : void
    + Form1Stop_Click(sender:object, e:EventArgs) : void
    + MP4ToMP3Convert_Click(sender:object, e:EventArgs) : void
    + MP3ToWavConvert_Click(sender:object, e:EventArgs) : void
}
ISoundModelProvider <|-- Form1Events
Form1Events --> "_NAudio" IUserPlaybackable
Form1Events --> "SoundData" SoundData
Form1Events --> "Status" ToolStripStatusLabel
Form1Events --> "VolumeBar" TrackBar
Form1Events --> "Form" Form
interface ISoundModelProvider {
}
ISoundModelProvider --> "SoundData" SoundData
class UFileDialog {
    + {static} FileOpen(fileter:string) : string
    + {static} InvokeFileOpen(fname:string) : string
}
class FormatsData <<struct>> {
    + <<const>> MP4 : string = "mp4"
    + <<const>> MP3 : string = "mp3"
    + <<const>> WAV : string = "wav"
}
class SoundData {
    {static} <<readonly>> - _lockObject : object
    + Fname : string <<get>> <<set>>
    - SoundData()
}
SoundData o-> "_waveOutEvent" WaveOutEvent
SoundData --> "_waveStream" WaveStream
SoundData --> "WaveOutEvent" WaveOutEvent
SoundData --> "WaveStream" WaveStream
SoundData --> "Instance" SoundData
SoundData --> "_instance" SoundData
class Form1 <<partial>> {
    + Form1()
    - GetIconPath() : string
}
Form <|-- Form1
Form1 --> "_form1Events" Form1Events
class Form1 <<partial>> {
    # <<override>> Dispose(disposing:bool) : void
    - InitializeComponent() : void
}
Form1 --> "menuStrip1" MenuStrip
Form1 --> "ファイルToolStripMenuItem" ToolStripMenuItem
Form1 --> "openToolStripMenuItem" ToolStripMenuItem
Form1 --> "playToolStripMenuItem" ToolStripMenuItem
Form1 --> "stopToolStripMenuItem" ToolStripMenuItem
Form1 --> "volumeTrackBar" TrackBar
Form1 --> "statusStrip1" StatusStrip
Form1 --> "fnameStripStatusLabel" ToolStripStatusLabel
Form1 --> "変換ToolStripMenuItem" ToolStripMenuItem
Form1 --> "mp4Tomp3ToolStripMenuItem" ToolStripMenuItem
Form1 --> "mp3ToWavToolStripMenuItem" ToolStripMenuItem
Form1 --> "pauseToolStripMenuItem1" ToolStripMenuItem
class PathExtension <<static>> {
    + {static} GetExtensionWithoutPeriod(path:string) : string
}
class FactoryConvert {
    + {static} Create(filePath:string) : IConverter
}
class "IFactory`1"<T> {
}
"IFactory`1" "<IConverter>" <|-- FactoryConvert
class FactoryNAudio {
    + {static} Create(fname:string) : IUserPlaybackable
}
class "IFactory`1"<T> {
}
"IFactory`1" "<IUserPlaybackable>" <|-- FactoryNAudio
interface "IFactory`1"<T> {
    {abstract} {static} Create(filePath:string) : T
}
interface IPauseable {
    Pause() : void
    Resume() : void
}
interface IReadable {
    Read(fname:string) : void
}
interface IStopable {
    Stop(waveStream:WaveStream) : void
}
interface IUserPlaybackable {
    AdjustVolume(volume:float) : void
    Play() : void
}
IReadable <|-- IUserPlaybackable
IPauseable <|-- IUserPlaybackable
IStopable <|-- IUserPlaybackable
abstract class NAudioBase {
    # Stooped : bool <<get>>
    # Paused : bool <<get>>
    # NullState : bool <<get>>
    + Pause() : void
    + AdjustVolume(volume:float) : void
    + <<virtual>> <<async>> Play() : void
    # Loop() : void
    # Reset(waveStream:WaveStream) : void
    + <<virtual>> Read(fname:string) : void
    + Resume() : void
    + Stop(waveStream:WaveStream) : void
}
IUserPlaybackable <|-- NAudioBase
ISoundModelProvider <|-- NAudioBase
NAudioBase --> "SoundData" SoundData
class NAudioMedia {
    + <<override>> Read(fname:string) : void
    + <<override>> Play() : void
}
NAudioBase <|-- NAudioMedia
class NAudioSound {
    + <<override>> Read(fname:string) : void
    + <<override>> Play() : void
}
NAudioBase <|-- NAudioSound
abstract class ConvertBase {
    # Success : string <<get>>
    # FileCheck(filePath:string) : bool
    + FilePath : string <<get>> <<init>>
    + <<virtual>> Convert() : void
}
class "Func`2"<T1,T2> {
}
class "Func`3"<T1,T2,T3> {
}
IConverter <|-- ConvertBase
ConvertBase --> "ShowMessage<string,DialogResult>" "Func`2"
ConvertBase --> "ChangeExtension<string,string,string>" "Func`3"
interface IConverter {
    Convert() : void
}
class NAudioMP3ToWAV {
    + <<override>> Convert() : void
    + NAudioMP3ToWAV(filePath:string)
}
ConvertBase <|-- NAudioMP3ToWAV
class NRecoMP4ToMP3 {
    + <<override>> Convert() : void
    + NRecoMP4ToMP3(filePath:string)
}
ConvertBase <|-- NRecoMP4ToMP3
@enduml
